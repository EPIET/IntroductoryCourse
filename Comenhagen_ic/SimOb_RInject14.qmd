---
title: "Solution: SimOb Inject 14 - Univariable analysis"
format: docx
editor: visual
---

## 1. Install packages and load libraries

```{r}
# Load the required libraries into the current R session:
pacman::p_load(rio, 
               here, 
               tidyverse, 
               skimr,
               plyr,
               janitor,
               lubridate,
               gtsummary, 
               flextable,
               officer,
               epikit, 
               apyramid, 
               scales,
               EpiStats,
               broom)

```

## 2. Import your data

```{r, Import_data}
# Import the raw data set:
copdata <- rio::import(here::here("data", "Copenhagen_clean2.rds"))
```

## 3. Hypothesis tests for other variables

#### a) age

With the Shapiro-Wilk test we check if the variables are following the normal distribution. The null hypothesis is that the data follow a normal distribution, therefore, rejecting the null hypothesis means that the data do not follow the normal distribution. A p-value below the cutoff for rejecting the null hypothesis, e.g., a p-value<0.05 means that we reject the null hypothesis that the data follow the normal distribution.
For age, the p-value is <0.05, therefore we reject the null hypothesis that the data are normally distributed. As we see in the graph most frequently reported age is <20 years.


```{r}
# Check if age overall follows a normal distribution:
shapiro.test(copdata$age)
# Can simply have a look at
hist(copdata$age)

# Looking only at the students:
students <- copdata %>% 
  filter(group == "student")
hist(students$age)
```

Age overall (nor within the students' group) is not normally distributed.

We compare the age for cases and non-cases using the Wilcoxon test that is used when the data are not normally distributed. The null hypothesis is that there is no difference in the age between the two groups compared. Given that p-value>0.05 we do not reject the null hypothesis.

```{r}
# Perform Wilcoxon rank sum test on age and sex:
wilcox.test(age ~ case, 
            data = copdata)
```

#### b) sex

```{r}
copdata %>% 
  select(sex, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()

```

#### c) class

```{r}
copdata %>% 
  select(class, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()

```

#### d) group

```{r}
copdata %>% 
  select(group, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()
```

#### Let's do all together

```{r}

copdata %>% 
  select(sex, class, group, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()

```


## 4. Risk Ratios

The risk ratios of each food item (including the 2x2 table) are reported below. The output of the CS() command is two tables (one with the 2x2 table and one with the risk difference, the risk ratio and the attributable fraction among exposed as well as the attributable fraction among the population (and the confidence intervals for all the estimates). The Chi-square and the p-value are also reported. 
In the second part, a table with all the food items is printed including attack rates for exposed and unexposed as well as risk ratios and the 95% confidence intervals (CI ll and CI ul, for the lower and upper interval) and p-values.


### a) Calculate 95% CI Risk Ratios for food

```{r}
# You could use the EpiStats package for each food item
CS(copdata, "case", "tuna")
CS(copdata, "case", "shrimps")
CS(copdata, "case", "green")
CS(copdata, "case", "veal")
# And so one
```

```{r}
# You can save time (and probably typos!) by creating a vector for food variables...
food_vars <- c("tuna", "shrimps", "green", "veal", 
                "pasta", "rocket", "sauce", "bread",
                "champagne", "beer", "redwine", "whitewine")

# ...and using EpiStats::CSTable() to run all variables together!
CSTable(copdata, "case", food_vars)
```

### b) Prepare the RR table for publication

```{r}
rr_tbl <- CSTable(copdata, "case", food_vars) %>% 
  as.data.frame() %>% 
  rownames_to_column() %>% 
  flextable() %>% 
   set_header_labels(
     values = c("Food Item",
                "Total exposed",     
               "Cases exposed", 
               "AR among exposed",    
               "Total unexposed",
               "Cases unexposed",
               "AR among unexposed",
               "RR",         
               "95% lower CI",             
               "95% upper CI",
               "p-value"))
```


## 5. Dose Response

#### a) Pasta

```{r}
# Binomial regression for RRs. 
# The outcome needs to be exponentiated so we can interpret it properly!
binom_pastaD <- glm(case ~ pastaD, data = copdata, 
             family = binomial(link = "log"))

# To get exponentiated:
binom_pastaD_exp <- glm(case ~ pastaD, data = copdata, 
                       family = binomial(link = "log")) %>% 
  tidy(exponentiate = TRUE, 
       conf.int = TRUE)

binom_pastaD_exp
```
#### b) Veal

```{r}

# Let's get the results directly exponentiated
binom_vealD_exp <- glm(case ~ vealD, data = copdata, 
                       family = binomial(link = "log")) %>% 
  tidy(exponentiate = TRUE, 
       conf.int = TRUE)

binom_vealD_exp
```

#### c) Champagne

```{r}
# Let's get the results directly exponentiated
binom_champagneD_exp <- glm(case ~ champagneD, data = copdata, 
                       family = binomial(link = "log")) %>% 
  tidy(exponentiate = TRUE, 
       conf.int = TRUE)

binom_champagneD_exp
```

