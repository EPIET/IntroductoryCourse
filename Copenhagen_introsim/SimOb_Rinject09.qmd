---
title: "SimOb Inject 09 - Data import and cleaning"
format: docx
editor: visual
execute: 
  output: false
---

## 1. Install packages and load libraries

```{r, Packages}
# Check if the 'pacman' package is installed, if not install it:
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")

# Load the required libraries into the current R session:
pacman::p_load(rio, 
               here, 
               tidyverse, 
               skimr,
               plyr,
               janitor,
               lubridate,
               gtsummary, 
               flextable,
               officer,
               epikit, 
               apyramid, 
               scales)

```

## 2. Import your data

```{r, Import_data}
# Import the raw data set:
linelist <- rio::import(here::here("data", "Copenhagen_raw.csv"))
```

## 3. Explore and clean your data

```{r, Explore_data}

head(linelist)
dim(linelist)
str(linelist)
skimr::skim(linelist)
names(linelist)

```

Let's explore and manage some variables in detail.

#### Age

Through visual exploration of the `age` histogram we see that there is at least one very high value, likely implausible. You can then create a cross-tabulation of variables age and group to have a better idea of how your data looks like.

```{r age_exploration}
# Have a look at the histogram  
hist(linelist$age)   
# Create cross-tab with the group variable:  
janitor::tabyl(dat = linelist, 
               var1 = age, 
               var2 = group)
```

Note that `group` is coded as 0 and 1, and these may be difficult to interpret when they mean something other than "no" and "yes", respectively. From the codebook, you know that teachers are represented by 0, and students by 1. Let's change this to make our lives easier:

```{r recode_group}
# Convert group to a factor and label 0 as teacher, 1 as student:
linelist <- linelist %>% 
  mutate(group = factor(group, 
                        labels = c("teacher", "student")))

```

Now, have a look at your cross-tab again:

```{r cross-tab_age_group}

janitor::tabyl(dat = linelist, 
               var1 = age, 
               var2 = group) 
```

With this table, we can more easily identify ages that are likely to be typographic errors. Specifically:

-   There is one teacher aged 16 (likely digit reversal - should be 61)

-   There is one student aged 8 (likely missing a digit - should be 18)

-   There is one student aged 180 (likely has an extra digit - should be 18)

Assuming you have contacted the school to make sure your suspicions about the actual ages are correct, we can now correct them, using `case_when()`. We create logical conditions to identify the incorrect ages, combining the values for age with the group they belong to:

```{r age_cleaning}

# Update incorrect ages to the correct values with case_when:  
linelist <- linelist %>%       
  mutate(age =                         
           case_when(                            
             # Where respondent is 16 and a teacher, change age to 61:
             age == 16 & group == "teacher" ~ 61,              
             # where respondent is 8 or 180 and a student, change age to 18:
             age == 8 & group == "student" ~ 18,              
             age == 180 & group == "student" ~ 18,              
             # Keep remaining values as is:              
             .default = as.numeric(age)              
             )                    
         ) 
```

#### Dose response

Now let's create a summary table of the dose response columns.

```{r }

#| label: check_dose_cols
#| tbl-cap: no caption

# Create summary table for dose response columns: 
drtable <- linelist %>%       
  # Select all the columns with column names that end in upper case 'D':   
  select(ends_with("D", ignore.case = FALSE)) %>%       
  # Create the summary table, excluding missing values:   
  gtsummary::tbl_summary(missing = "no") %>%       
  # Convert to flextable:   
  gtsummary::as_flex_table() 

  # Print the summary table: 
drtable
```

### Modify variables format

We want to modify the "variable format" or "column type" of many variables, so that we can do future calculations with them in the following injects (some functions will need a specific "type" of input).

| Variable name                                                                                               | Original  | Desired | Hint                                                                             |
|---------------------------------|------------|------------|-----------------|
| sex                                                                                                         | character | factor  | mutate(), as.factor()                                                            |
| class                                                                                                       | integer   | factor  | mutate(), as.factor()                                                            |
| All the clinical symptom variables                                                                          | integer   | logical | mutate(across()), as.logical()                                                   |
| All the food variables representing the amount of specific foods eaten (those finishing with a capital "D") | integer   | factor  | mutate(across()), as.factor()                                                    |
| dayonset                                                                                                    | character | date    | lubridate::dmy()                                                                 |
| starthour                                                                                                   | integer   |         | stringr::str_glue() with dayonset and starthour; and then use lubridate::ymd_h() |

: Table 1_Inject 09: Variable types to modify

#### Sex, group and class

Let's start transforming one-by-one the first two variables in the table: `sex`, and `class`.

```{r, mutate_simple}
linelist <- linelist %>% 
  dplyr::mutate(
    sex = as.factor(sex),
    class = as.factor(class))
 
```

#### Symptoms and Food variables

For these variables, we are going to show you a couple of different ways to carry out the same variable type transformation in a *set* of variables, so you don't need to do one variable at a time. We are showing you these ways so you see alternative ways to do the same thing.

1.  For the variables that are clinical symptoms, we will list them one by one and show you the use of `mutate(across( ))`.

```{r, mutate_cs}
linelist <- linelist %>% 
  dplyr::mutate(
    # clinical symptoms
    across(.cols = c(diarrhoea, bloody, vomiting,
             abdo, nausea, fever,headache, jointpain), 
           .fns = ~ as.logical(.)
           )
    )
```

2.  For the variables that are food doses, we will show you how to first create a vector of names, following by using `mutate(across(all_of( )))` on this vector.

```{r, mutate_food}
# Create a vector with all the food variables representing the amount of specific foods items eaten (those finishing with a capital "D")
# One way of doing it:
food_dose <- linelist %>% 
    dplyr::select(
      ends_with("D", ignore.case = FALSE)) %>% 
    names()

# Another way of doing it:
food_dose <- c("tunaD", "shrimpsD", "greenD", "vealD", 
                "pastaD", "rocketD", "sauceD", "breadD",
                "champagneD", "beerD", "redwineD", "whitewineD")


linelist <- linelist %>% 
  dplyr::mutate(
    # food dose variables
    across(.cols = all_of(food_dose), 
           .fns = ~as.factor(.))) 
  
```

***Note***: The tilde (`~`) bellow is used to apply the transformation `as.logical(.)` to each selected column, which in our case is either all columns included in `food_items` and `food_dose.`

#### Date and time variables

You can use `lubridate::dmy()` to mutate the `dayonset` variable into a date variable. Note that we are using the function `dmy()` because dates are formatted as day, then month (abbreviated character string), then year (i.e. "12nov2006").

```{r correct_date_format}
# Have a look at how the data is stored
head(linelist$dayonset)
class(linelist$dayonset)

# Update linelist:
linelist <- linelist %>% 
  # Change column to date class:
  dplyr::mutate(
    dayonset = lubridate::dmy(dayonset))

# Check class of updated column:
class(linelist$dayonset)
```

Having a variable that defines "time" in an outbreak investigation can be very useful when creating a case definition. An hour of the day, without a date associated with it doesn't help you much, thus, you should merge together day and time of onset of symptoms into a single variable. Moreover, you will be using this combined variable later on to estimate an incubation period and create your epicurve. We can combine these two variables by using the `lubridate::ymd_h()` function.

Before we proceed, it would be wise to check if any respondents have a value for `dayonset` but not `starthour`, or vice versa. The `lubridate` date-time conversion functions do not have an explicit argument for dealing with missing values, but the `truncated = â€¦` argument can help prevent spurious date-times being derived from a date-time combination where one value is missing.

We can check if we have any missing values by cross-tabulating `starthour` with `dayonset`:

```{r crosstab_dayonset_starthour}
# Cross-tabulate dayonset with starthour:
janitor::tabyl(dat = linelist, 
               var1 = starthour, 
               var2 = dayonset)
```

This shows us that there are two respondents who had an onset date, but are missing onset time (`starthour`). Since `starthour` is represented by 1 - 2 digits, we can specify that we want `lubridate` to also parse date-time combinations that are truncated by up to two digits:

```{r combine_date_time}
linelist <- linelist %>% 
  # Combine dayonset and starthour in a new date time variable:
  mutate(onset_datetime = 
           lubridate::ymd_h(
             str_glue("{dayonset}, {starthour}"), 
                                           # Deal with missing starthour:
                                           truncated = 2))
```

Note that we needed to use `str_glue()` to concatenate `dayonset` and `starthour` together before we could convert the variable to a date-time object. This is because the `ymd_h()` function expects a single character string, containing both the date and the time, as input.

The argument `truncated = 2` will result in dates with missing `starthour` still being converted to date-time, with the missing time being set to `00:00` (midnight). Whether you want to deal with missing `starthour` in this way or prefer to code these date-times as `NA` will depend on how you want them to be represented in your analysis.

Now we can check that everything in the new combined date-time variable has parsed correctly:

```{r check_onset_datetime}

head(linelist$dayonset)
head(linelist$starthour)
head(linelist$onset_datetime)
```

# 4. Export clean data

Save the cleaned data set before proceeding with using your case definition to identify cases in your dataset. Use the .rds format, as it preserves column classes. This ensures you will have only minimal cleaning to do after importing the data into R at the next inject.

```{r export_clean_data}

rio::export(x = linelist, 
            file = here::here("data", "Copenhagen_clean1.rds"))

```
