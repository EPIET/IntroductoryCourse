---
title: "Solutions: SimOb All Injects"
format: docx
editor: visual
---

```{r}
# Output to R script:
knitr::knit_hooks$set(purl = knitr::hook_purl)
```

# Inject 09

## 1. Install packages and load libraries

```{r, Packages}
# Check if the 'pacman' package is installed, if not install it:
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")

# Load the required libraries into the current R session:
pacman::p_load(rio, 
               here, 
               tidyverse, 
               skimr,
               plyr,
               janitor,
               lubridate,
               gtsummary, 
               flextable,
               officer,
               epikit, 
               apyramid, 
               scales,
               broom,
               EpiStats)

```

## 2. Import your data

```{r, Import_data09}
# Import the raw data set:
copdata <- rio::import(here::here("data", "Copenhagen_raw.csv"))
```

## 3. Explore and clean your data

```{r, Explore_data}
head(copdata)
dim(copdata)
str(copdata)
skimr::skim(copdata)
names(copdata)

```

Let's explore and manage some variables in detail.

#### Age

Through visual exploration of the `age` histogram we see that there is at least one very high value, likely implausible. You can then create a cross-tabulation of variables age and group to have a better idea of how your data looks like.

```{r age_exploration}
# Have a look at the histogram  
hist(copdata$age)   
# Create cross-tab with the group variable:  
janitor::tabyl(dat = copdata, 
               var1 = age, 
               var2 = group)
```

Note that `group` is coded as 0 and 1, and these may be difficult to interpret when they mean something other than "no" and "yes", respectively. From the codebook, you know that teachers are represented by 0, and students by 1. Let's change this to make our lives easier:

```{r recode_group}
# Convert group to a factor and label 0 as teacher, 1 as student:
copdata <- copdata %>% 
  mutate(group = factor(group, 
                        labels = c("teacher", "student")))

```

Now, have a look at your cross-tab again:

```{r cross-tab_age_group}

janitor::tabyl(dat = copdata, 
               var1 = age, 
               var2 = group) 
```

With this table, we can more easily identify ages that are likely to be typographic errors. Specifically:

-   There is one teacher aged 16 (likely digit reversal - should be 61)

-   There is one student aged 8 (likely missing a digit - should be 18)

-   There is one student aged 180 (likely has an extra digit - should be 18)

Assuming you have contacted the school to make sure your suspicions about the actual ages are correct, we can now correct them, using `case_when()`. We create logical conditions to identify the incorrect ages, combining the values for age with the group they belong to:

```{r age_cleaning}

# Update incorrect ages to the correct values with case_when:  
copdata <- copdata %>%       
  mutate(age =                         
           case_when(                            
             # Where respondent is 16 and a teacher, change age to 61:
             age == 16 & group == "teacher" ~ 61,              
             # where respondent is 8 or 180 and a student, change age to 18:
             age == 8 & group == "student" ~ 18,              
             age == 180 & group == "student" ~ 18,              
             # Keep remaining values as is:              
             .default = as.numeric(age)   
             # if .default is not working, try:
             # TRUE ~ age
             )                    
         ) 
```

#### Dose response

Now let's create a summary table of the dose response columns.

```{r }

#| label: check_dose_cols
#| tbl-cap: no caption

# Create summary table for dose response columns: 
drtable <- copdata %>%       
  # Select all the columns with column names that end in upper case 'D':   
  select(ends_with("D", ignore.case = FALSE)) %>%       
  # Create the summary table, excluding missing values:   
  gtsummary::tbl_summary(missing = "no") 

  # Print the summary table: 
drtable
```

## 4. Modify variables format

We want to modify the "variable format" or "column type" of many variables, so that we can do future calculations with them in the following injects (some functions will need a specific "type" of input).

+-------------------------------------------------------------------------------------------------------------+---------------------+-----------------+--------------------------------------------------------------------------------------+
| Variable name                                                                                               | Original            | Desired         | Hint                                                                                 |
+=============================================================================================================+=====================+=================+======================================================================================+
| sex                                                                                                         | character           | factor          | mutate(), as.factor()                                                                |
+-------------------------------------------------------------------------------------------------------------+---------------------+-----------------+--------------------------------------------------------------------------------------+
| class                                                                                                       | integer             | factor          | mutate(), as.factor()                                                                |
+-------------------------------------------------------------------------------------------------------------+---------------------+-----------------+--------------------------------------------------------------------------------------+
| All the clinical symptom variables                                                                          | integer             | logical         | mutate(across()), as.logical()                                                       |
+-------------------------------------------------------------------------------------------------------------+---------------------+-----------------+--------------------------------------------------------------------------------------+
| All the food variables representing the amount of specific foods eaten (those finishing with a capital "D") | integer             | factor          | mutate(across()), as.factor()                                                        |
+-------------------------------------------------------------------------------------------------------------+---------------------+-----------------+--------------------------------------------------------------------------------------+
| dayonset                                                                                                    | character           | date            | lubridate::dmy()                                                                     |
+-------------------------------------------------------------------------------------------------------------+---------------------+-----------------+--------------------------------------------------------------------------------------+
| starthour and dayonset together                                                                             | integer (starthour) | POSIXct, POSIXt | lubridate::ymd_h() could have inside stringr::str_glue() with dayonset and starthour |
|                                                                                                             |                     |                 |                                                                                      |
|                                                                                                             | date (dayonset)     |                 |                                                                                      |
+-------------------------------------------------------------------------------------------------------------+---------------------+-----------------+--------------------------------------------------------------------------------------+

: Table 1_Inject 09: Variable types to modify

#### Sex, group and class

Let's start transforming one-by-one the first two variables in the table: `sex`, and `class`.

```{r, mutate_simple}
copdata <- copdata %>% 
  dplyr::mutate(
    sex = as.factor(sex),
    class = as.factor(class))
 
```

#### Symptoms and Food variables

For these variables, we are going to show you a couple of different ways to carry out the same variable type transformation in a *set* of variables, so you don't need to do one variable at a time. We are showing you these ways so you see alternative ways to do the same thing.

1.  For the variables that are clinical symptoms, we will list them one by one and show you the use of `mutate(across( ))`.

```{r, mutate_cs}
copdata <- copdata %>% 
  dplyr::mutate(
    # clinical symptoms
    across(.cols = c(diarrhoea, bloody, vomiting,
             abdo, nausea, fever,headache, jointpain), 
           .fns = ~ as.logical(.)
           )
    )
```

2.  For the variables that are food doses, we will show you how to first create a vector of names, following by using `mutate(across(all_of( )))` on this vector.

```{r, mutate_food}
# Create a vector with all the food variables representing the amount of specific foods items eaten (those finishing with a capital "D")
# One way of doing it:
food_dose <- copdata %>% 
    dplyr::select(
      ends_with("D", ignore.case = FALSE)) %>% 
    names()

# Another way of doing it:
food_dose <- c("tunaD", "shrimpsD", "greenD", "vealD", 
                "pastaD", "rocketD", "sauceD", "breadD",
                "champagneD", "beerD", "redwineD", "whitewineD")


copdata <- copdata %>% 
  dplyr::mutate(
    # food dose variables
    across(.cols = all_of(food_dose), 
           .fns = ~as.factor(.))) 
  
```

***Note***: The tilde (`~`) bellow is used to apply the transformation `as.logical(.)` to each selected column, which in our case is either all columns included in `food_items` and `food_dose.`

#### Date and time variables

You can use `lubridate::dmy()` to mutate the `dayonset` variable into a date variable. Note that we are using the function `dmy()` because dates are formatted as day, then month (abbreviated character string), then year (i.e. "12nov2006").

```{r correct_date_format}
# Have a look at how the data is stored
head(copdata$dayonset)
class(copdata$dayonset)

# Update copdata:
copdata <- copdata %>% 
  # Change column to date class:
  dplyr::mutate(
    dayonset = lubridate::dmy(dayonset))

# Check class of updated column:
class(copdata$dayonset)
```

Having a variable that defines "time" in an outbreak investigation can be very useful when creating a case definition. An hour of the day, without a date associated with it doesn't help you much, thus, you should merge together day and time of onset of symptoms into a single variable. Moreover, you will be using this combined variable later on to estimate an incubation period and create your epicurve. We can combine these two variables by using the `lubridate::ymd_h()` function.

Before we proceed, it would be wise to check if any respondents have a value for `dayonset` but not `starthour`, or vice versa. The `lubridate` date-time conversion functions do not have an explicit argument for dealing with missing values, but the `truncated = …` argument can help prevent spurious date-times being derived from a date-time combination where one value is missing.

We can check if we have any missing values by cross-tabulating `starthour` with `dayonset`:

```{r crosstab_dayonset_starthour}
# Cross-tabulate dayonset with starthour:
janitor::tabyl(dat = copdata, 
               var1 = starthour, 
               var2 = dayonset)
```

This shows us that there are two respondents who had an onset date, but are missing onset time (`starthour`). Since `starthour` is represented by 1 - 2 digits, we can specify that we want `lubridate` to also parse date-time combinations that are truncated by up to two digits:

```{r combine_date_time}
copdata <- copdata %>% 
  # Combine dayonset and starthour in a new date time variable:
  mutate(onset_datetime = 
           lubridate::ymd_h(
             str_glue("{dayonset}, {starthour}"), 
                                           # Deal with missing starthour:
                                           truncated = 2))
```

Note that we needed to use `str_glue()` to concatenate `dayonset` and `starthour` together before we could convert the variable to a date-time object. This is because the `ymd_h()` function expects a single character string, containing both the date and the time, as input.

The argument `truncated = 2` will result in dates with missing `starthour` still being converted to date-time, with the missing time being set to `00:00` (midnight). Whether you want to deal with missing `starthour` in this way or prefer to code these date-times as `NA` will depend on how you want them to be represented in your analysis.

Now we can check that everything in the new combined date-time variable has parsed correctly:

```{r check_onset_datetime}

head(copdata$dayonset)
head(copdata$starthour)
head(copdata$onset_datetime)
```

## 5. Export clean data

Save the cleaned data set before proceeding with using your case definition to identify cases in your dataset. Use the .rds format, as it preserves column classes. This ensures you will have only minimal cleaning to do after importing the data into R at the next inject.

```{r export_clean_data09}

rio::export(x = copdata, 
            file = here::here("data", "Copenhagen_clean1.rds"))

```

# Inject 10

## 2. Import your data

```{r, Import_data10}
# Import the clean data set:
copdata <- rio::import(here::here("data", "Copenhagen_clean1.rds"))
```

## 3. Identify cases

### a) Ate a meal at the school dinner

Keep in your dataset only those who ate a meal.

```{r}
copdata <- copdata %>% 
  filter(meal == TRUE)
```

### b) Fell ill after the start of the meal

Define "fell ill" as any person having had diarrhoea with OR without blood, OR vomiting. Note that we the concept of having eaten a meal is already included as per one of the steps above:

```{r}
copdata <- copdata %>% 
  mutate(gastrosymptoms = case_when(
    # Those had diarrhoea...
    diarrhoea == TRUE |
      #or bloody diarrhoea...
    bloody == TRUE |
      # or vomiting, are marked as TRUE (fell ill after the meal)
    vomiting == TRUE ~ TRUE,
    # The rest are FALSE. This includes those who ate a meal but had no symptoms (did not fell ill after the meal)
    .default = FALSE)
    )
```

### c) Fell ill within the time period of interest

Create a new meal_datetime variable as per 11 Nov 2006, at 18:00h:

```{r}
# Start with copdata:
copdata <- copdata %>% 
  # Create new column for meal date and time:
  mutate(meal_datetime = lubridate::ymd_hm("2006-11-11 18:00"))
```

Calculate incubation time and its median:

```{r}

copdata <- copdata %>% 
  mutate(incubation = onset_datetime - meal_datetime,
         incubation = as.numeric (incubation))


median(as.numeric(copdata$incubation), na.rm = TRUE)

```

We see that the median incubation time is 15 hours. This is useful information, as incubation periods tend to be relatively pathogen-specific. We can now refine the case definition and limit the maximum incubation period from the meal time to 48 hours (2 days) after the meal, as the data points to a fast-acting bacterial toxin or a virus.

```{r}

copdata <- copdata %>% 
  mutate(case = case_when(
    # Those who had symptoms <48h from the meal are cases (TRUE)
    gastrosymptoms == TRUE & 
      onset_datetime >= meal_datetime &
      onset_datetime <= (meal_datetime + days(2)) ~ TRUE,
    # Those who had symptoms >48h from the meal are non-cases (FALSE)
    gastrosymptoms == TRUE & 
      onset_datetime > (meal_datetime + days(2)) ~ FALSE,
    # The rest are considered non-cases. Including, those who had no symptoms at all, who have missing data on the onset_datetime variable, or who had symptoms before eating the meal 
    .default = FALSE)
  )
```

Note that we may be incurring in misclassification bias with the code above. The last section indicates that if a person had clinical symptoms before eating the meal, they are considered as non-cases. However, it could be that a person had symptoms before the meal, and yet, still got infected by the pathogen when eating their meal (bad luck, we know...).

Moreover, if you remember from inject 9, there were a couple of people with an `dayonset`, but no `starthour`. The code we used (`lubridate::ymd_h` with argument `truncated = 2`) results in dates with missing `starthour` being converted to date-time, with the missing time being set to `00:00` (midnight). This means that these two people don't fulfill the case definition criteria because we marked their symptoms started early in the morning of Nov 11 (at 00:00), before the meal time (18:00), and thus, they did not "fell ill within the time period of interest".

The two situations above are a reminder that you need to be both careful and aware of the implications of your data analysis decisions.

```{r}
# Tabulate cases:
janitor::tabyl(dat = copdata, case)
```

Let's have a look at how many people ate a meal, had symptoms, and were considered as cases after applying our case definition:

```{r overview}
copdata %>% 
  summarise(atemeal = sum(meal == TRUE),
            hadsympt = sum(gastrosymptoms == TRUE),
            nb_cases = sum(case == TRUE)
            )
```

# 4. Export clean data

Finally, we can save the cleaned data set before proceeding with descriptive analysis.

```{r export_clean_data10}

rio::export(x = copdata, 
            file = here::here("data", "Copenhagen_clean2.rds"))

```

#Inject 11 \## 2. Import your data

```{r, Import_data11}
# Import the clean data set:
copdata <- rio::import(here::here("data", "Copenhagen_clean2.rds")) 

```

## 3. Time

### a) Incubation period histogram

```{r}

#| label: inc_time

# Create a dataset with only cases
cases <- copdata %>% 
  filter(case == TRUE)

incplot <- cases %>% 
  # Create an empty ggplot frame:
  ggplot() +
  # Add a histogram of incubation:
  geom_histogram(
    mapping = aes(x = incubation), 
    # Set bin widths to 6 hours:
    binwidth = 6) +
  # Adapt scale to better fit data
  scale_x_continuous(breaks = seq(0, 48, 6)) + 
  # Label x and y axes:
  labs(x = "Incubation period in 6-hour bins",
       y = "Number of cases")

# Print plot:
incplot
```

### b) Epicurve for date and time of onset

```{r}
#| label: epicurve date-time

# Create a vector with sequences every 6h from the first to the last case
breaks_6h <- seq(from = min(cases$onset_datetime, na.rm = TRUE),
                 to = max(cases$onset_datetime, na.rm = TRUE),
                 by = "6 hours")

# Fetch cases data:
epicurve_datetime <- cases %>%  
  # Add factor onset_datetime to ggplot aesthetic:
  ggplot(
    mapping = aes(x = onset_datetime)) + 
  # Add geom_histogram:
  geom_histogram(
    # Apply the vector of requences created above
    breaks = breaks_6h) +
  # Adapt scale to data and adjust axis label angle:
  scale_x_datetime(
    date_breaks = "6 hours",
    labels = label_date_short()) +
  # Update x and y axis labels:
  labs(x = "Date and time of onset symptoms", 
       y = "Number of cases") +
  # Remove unnecessary grid lines:
  theme_bw()

# Print epicurve:
epicurve_datetime
```

```{r}
#| label: epicurve strata

epicurve_strata <- cases %>% 
  # Add factor onset_day to ggplot aesthetic:
  ggplot(
    mapping = aes(x = onset_datetime, fill = group)) + 
  # Add nicer fill colours:
  scale_fill_manual(values = c("darkred", "lightblue")) +
    # Add geom_histogram:
  geom_histogram(
    # Apply the vector of requences created above
    breaks = breaks_6h) +
  # Adjust x axis scales to a suitable unit:
  scale_x_datetime(
    date_breaks = "6 hours", 
    labels = label_date_short()) +
  # Update x and y axis labels:
  labs(x = "Date and time of onset", 
       y = "Number of cases", 
       fill = "Group", 
       title = "Epicurve of the outbreak, stratified by sex",
       subtitle = str_glue("Copenhagen, November 2006, N = {sum(copdata$case)}")) +
  # Stratify by sex:
  facet_wrap(facets = "sex",
             ncol = 2) +
  # Add theme:
  theme_bw()

# Print epicurve:
epicurve_strata 
```

## 4. Person

### a) Cross-tabulation of cases with group

```{r}
#| label: Cross-tab cases

copdata %>% 
  janitor::tabyl(case, group) %>% 
  adorn_totals() %>% 
  adorn_percentages() %>% 
  adorn_pct_formatting() 

```

### b) Cross-tabulation of cases with sex

```{r}

copdata %>% 
  janitor::tabyl(case, sex) %>% 
  adorn_totals() %>% 
  adorn_percentages() %>% 
  adorn_pct_formatting() 

```

### c) Extra - Age-sex pyramid of cases

```{r}

copdata <- copdata %>% 
  # Create age categories:
  mutate(age_cat = epikit::age_categories(
    # Name of age column:
    x = age, 
    # Define the age categories:
    breakers = c(0, 10, 16, 18, 20, 50, 70)
    )
  )


# Check age categories:
janitor::tabyl(copdata, age_cat)

# Pipe copdata:
agesex <- copdata %>% 
  # Filter for cases only:
  filter(case == TRUE) %>% 
  # Create age sex pyramid:
  apyramid::age_pyramid(
  # Specify column containing age categories:
    age_group = "age_cat",
    # Specify column containing sex:
    split_by = "sex", 
    # Don't show midpoint on the graph:
    show_midpoint = FALSE
    )

# Print plot:
agesex
```

(Hint: change `show_midpoint = FALSE` to `TRUE` to see skewedness in the data patterns more easily).

## 5. Symptoms

a)  Summary table of symptoms, stratified by case definition

```{r}

# Create summary table:
tabsymptoms <- copdata %>% 
    # Select person characteristics to summarise:
  select(case, diarrhoea, bloody, vomiting,
             abdo, nausea, fever,headache, jointpain) %>% 
  # transform clinical symptoms to factors, so NA can be accounted properly in the table
  dplyr::mutate(
    across(.cols = c(diarrhoea, bloody, vomiting,
             abdo, nausea, fever,headache, jointpain), 
           .fns = ~as.factor(.))) %>%
  # Make NA a explicit level of factor variables
  dplyr::mutate(
    across(.cols = c(diarrhoea, bloody, vomiting,
           abdo, nausea, fever,headache, jointpain),
           .fns = ~forcats::fct_na_value_to_level(.))) %>% 
    
  # Create the summary table:
  gtsummary::tbl_summary(
    # Stratify by case:
    by = case, 
    # Calculate row percentages:
    percent = "column",
    # Create nice labels:
    label  = list(
      diarrhoea   ~ "Diarrhoea",                           
      bloody      ~ "Dysentary",
      vomiting    ~ "Vomiting",
      abdo        ~ "Abdominal pain",
      nausea      ~ "Nausea", 
      fever       ~ "Fever", 
      headache    ~ "Headache", 
      jointpain   ~ "Joint pain")
    
  ) %>% 
  
  # Add totals:
  add_overall() %>% 
  # Make variable names bold and italics:
  bold_labels() %>% 
  italicize_labels() %>% 
  # Modify header:
  modify_header(
    label = "**Characteristic**",
    stat_0 = "**Overall**\n **N** = {N}",
    stat_1 = "**Non-case**\n **N** = {n}",
    stat_2 = "**Case**\n **N** = {n}", 
    )

# Print the table:
tabsymptoms
```

b)  Bar plot of symptoms stratified by case definition

```{r symptom_barplot}

# Create list of symptom variables:
symptoms <- c("diarrhoea", 
              "bloody", 
              "vomiting", 
              "abdo", 
              "nausea", 
              "fever", 
              "headache", 
              "jointpain")

# Create nice labels for case definition:
caselabs <- ggplot2::as_labeller(c(`FALSE` = "Non-case", 
                                   `TRUE` = "Case"))
# Select variables and cases:
symptom_bar <- copdata %>% 
  # Select symptom columns:
  select(case, c(all_of(symptoms))) %>%
  # Drop NAs:
  drop_na() %>% 
  # Reshape (pivot longer):
  pivot_longer(!case, 
               names_to = "Symptoms", 
               values_drop_na = TRUE) %>% 
  # Keep only TRUE values:
  filter(value == TRUE) %>% 
 
   # Group by symptoms and case:
  group_by(Symptoms, case) %>% 
  # Count for each symptom by case:
  dplyr::summarise(count = n()) %>% 
  # Create plot:
  ggplot(
    mapping = aes(
    # Order symptom bars so most common ones are ontop:
    x = reorder(Symptoms, desc(count), decreasing = TRUE), 
    y = count)) +
  # Display bars as proportions
  geom_bar(stat = "identity") +
  # Update x axis label:
  xlab("Symptoms") +
  # Update y axis label:
  ylab("Proportion of respondents") +
  # Flip plot on its side so symptom labels are clear:
  coord_flip() +
  # Facet the plot by (labelled) case:
  facet_wrap(facets = "case",
             labeller = caselabs,
             ncol = 2)

# Print plot:
symptom_bar
```

## 6. Attack proportions

a)  Overall attack proportion

```{r}

# Create table of case status:
total_ap <- tabyl(copdata, case) %>% 
 # Add row totals:
  adorn_totals(where = "row") %>% 
  # Add percentages with 1 digit after the decimal point:
  adorn_pct_formatting(digits = 1) %>% 
  # Filter to rows where case is TRUE:
  filter(case == TRUE) %>% 
  # Select the column percent:
  select(percent) %>% 
  # Extract (pull) the value from this cell:
  pull()

# Print result:
total_ap

```

b)  Attack proportions for class, group and sex by case status

```{r}

# Table to calculate attack proportions:
attack_prop <- copdata %>% 
  # Select columns:
  select (case, class, group, sex) %>% 
  
  # Create table:
  tbl_summary(
    # Stratified by case
    by = case,
    # with row percentages
    percent = "row") %>%
  
  # Add totals:
  add_overall() %>%
  
  # Make variable names bold and italics:
  bold_labels() %>% 
  italicize_labels() %>% 
  
  # Modify header:
  modify_header(
    label = "**Characteristic**",
    stat_0 = "**Overall** **N** = {N}",
    stat_1 = "**Non-case** **N** = {n}",
    stat_2 = "**Case** **N** = {n}"
  )


# Print table:
attack_prop

```

# Inject 14

## 2. Import your data

```{r, Import_data14}
# Import the raw data set:
copdata <- rio::import(here::here("data", "Copenhagen_clean2.rds"))
```

## 3. Hypothesis tests for other variables

#### a) age

With the Shapiro-Wilk test we check if the variables are following the normal distribution. The null hypothesis is that the data follow a normal distribution, therefore, rejecting the null hypothesis means that the data do not follow the normal distribution. A p-value below the cutoff for rejecting the null hypothesis, e.g., a p-value\<0.05 means that we reject the null hypothesis that the data follow the normal distribution. For age, the p-value is \<0.05, therefore we reject the null hypothesis that the data are normally distributed. As we see in the graph most frequently reported age is \<20 years.

```{r}
# Check if age overall follows a normal distribution:
shapiro.test(copdata$age)
# Can simply have a look at
hist(copdata$age)

# Looking only at the students:
students <- copdata %>% 
  filter(group == "student")
hist(students$age)
```

Age overall (nor within the students' group) is not normally distributed.

We compare the age for cases and non-cases using the Wilcoxon test that is used when the data are not normally distributed. The null hypothesis is that there is no difference in the age between the two groups compared. Given that p-value\>0.05 we do not reject the null hypothesis.

```{r}
# Perform Wilcoxon rank sum test on age and sex:
wilcox.test(age ~ case, 
            data = copdata)
```

#### b) sex

```{r}
copdata %>% 
  select(sex, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()

```

#### c) class

```{r}
copdata %>% 
  select(class, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()

```

#### d) group

```{r}
copdata %>% 
  select(group, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()
```

#### Let's do all together

```{r}

copdata %>% 
  select(sex, class, group, case) %>% 
  tbl_summary(by = case) %>% 
  add_p()

```

## 4. Risk Ratios

The risk ratios of each food item (including the 2x2 table) are reported below. The output of the CS() command is two tables (one with the 2x2 table and one with the risk difference, the risk ratio and the attributable fraction among exposed as well as the attributable fraction among the population (and the confidence intervals for all the estimates). The Chi-square and the p-value are also reported. In the second part, a table with all the food items is printed including attack rates for exposed and unexposed as well as risk ratios and the 95% confidence intervals (CI ll and CI ul, for the lower and upper interval) and p-values.

### a) Calculate 95% CI Risk Ratios for food

```{r}
# You could use the EpiStats package for each food item
CS(copdata, "case", "tuna")
CS(copdata, "case", "shrimps")
CS(copdata, "case", "green")
CS(copdata, "case", "veal")
# And so one
```

```{r}
# You can save time (and probably typos!) by creating a vector for food variables...
food_vars <- c("tuna", "shrimps", "green", "veal", 
                "pasta", "rocket", "sauce", "bread",
                "champagne", "beer", "redwine", "whitewine")

# ...and using EpiStats::CSTable() to run all variables together!
CSTable(copdata, "case", food_vars)
```

### b) Prepare the RR table for publication

```{r}
rr_tbl <- CSTable(copdata, "case", food_vars) %>% 
  as.data.frame() %>% 
  rownames_to_column() %>% 
  flextable() %>% 
   set_header_labels(
     values = c("Food Item",
                "Total exposed",     
               "Cases exposed", 
               "AR among exposed",    
               "Total unexposed",
               "Cases unexposed",
               "AR among unexposed",
               "RR",         
               "95% lower CI",             
               "95% upper CI",
               "p-value"))
```

## 5. Dose Response

#### a) Pasta

```{r}
# Binomial regression for RRs. 
# The outcome needs to be exponentiated so we can interpret it properly!
binom_pastaD <- glm(case ~ pastaD, data = copdata, 
             family = binomial(link = "log"))

# To get exponentiated:
binom_pastaD_exp <- glm(case ~ pastaD, data = copdata, 
                       family = binomial(link = "log")) %>% 
  tidy(exponentiate = TRUE, 
       conf.int = TRUE)

binom_pastaD_exp
```

#### b) Veal

```{r}

# Let's get the results directly exponentiated
binom_vealD_exp <- glm(case ~ vealD, data = copdata, 
                       family = binomial(link = "log")) %>% 
  tidy(exponentiate = TRUE, 
       conf.int = TRUE)

binom_vealD_exp
```

#### c) Champagne

```{r}
# Let's get the results directly exponentiated
binom_champagneD_exp <- glm(case ~ champagneD, data = copdata, 
                       family = binomial(link = "log")) %>% 
  tidy(exponentiate = TRUE, 
       conf.int = TRUE)

binom_champagneD_exp
```

# Inject 15

## 2. Import your data

```{r, Import_data15}
# Import the raw data set: 
copdata <- rio::import(here::here("data", "Copenhagen_clean2.rds"))
```

## 3. Risk Ratio

### a) Veal as exposure of interest, stratified by having eaten pasta

```{r}
stratall <- copdata %>% 
  # Mutate across to convert cases to numeric:
  mutate(across(.cols = case, 
                .fns = ~ as.numeric(.)))

# Pass data to the csinter function:
pastastrata <- csinter(x = stratall, 
                       cases = "case", 
                       exposure = "veal", 
                       by = "pasta")

pastastrata
```

Let's check if pasta is associated with veal (if we are thinking veal may be a confounder, we need to see if there is an association between the potential confounder (veal) and the exposure (pasta)):

```{r}
# Perform Wilcoxon rank sum test on pasta and veal:
wilcox.test(pasta ~ veal, 
            data = copdata)
```

### c) Champagne as exposure of interest, stratified by having eaten pasta

```{r}
# Pass data to the csinter function:
champstrata <- csinter(x = stratall, 
                       cases = "case", 
                       exposure = "champagne", 
                       by = "pasta")
```
