---
title: "SimOb Inject 11 - Descriptive analysis"
format: html
editor: visual
---

## 1. Install packages and load libraries

```{r}
# Load the required libraries into the current R session:
pacman::p_load(rio, 
               here, 
               tidyverse, 
               skimr,
               plyr,
               janitor,
               lubridate,
               gtsummary, 
               flextable,
               officer,
               epikit, 
               apyramid, 
               scales)

# Load EpiStats from Github:
# pacman::p_load_gh("Epiconcept-Paris/EpiStats")
# pacman::p_load_gh("Epiconcept-Paris/EpiStats@release_1.4-1_2020-04-21")
```

## 2. Import your data

```{r, Import_data}
# Import the raw data set:
linelist <- rio::import(here::here("data", "Copenhagen_clean_inj10.xlsx"))%>% 
  # Convert character columns to factors:
  mutate_if(is.character,as.factor)

# # Import the raw data set:
# linelist <- rio::import(here::here("data", "Copenhagen_clean_inj10.xlsx"))%>% 
#   # Convert character columns to factors:
#   mutate(across( c(sex, group, class, 
#                    tunaD, shrimpsD, greenD, vealD, pastaD, rocketD, sauceD, 
#                    breadD,champagneD, beerD, redwineD, whitewineD), ~as.factor(.)))

```

## 3. Time

### a) Incubation period histogram

```{r inc_time}
incplot <- linelist %>% 
  #Keep cases only
  filter(case == TRUE) %>% 
  # Create an empty ggplot frame:
  ggplot() +
  # Add a histogram of incubation:
  geom_histogram(aes(x = incubation), 
                 # Set bin widths to 6 hours:
                 binwidth = 6) +
  # Adapt scale to better fit data
  scale_x_continuous(breaks = seq(0, 48, 6)) + 
  # Label x and y axes:
  labs(x = "Incubation period in 6-hour bins",
       y = "Number of cases")

# Print plot:
incplot
```
### b) Epicurve for date and time of onset

```{r epicurve_datetime}

# Fetch data:
epicurve_date <- linelist %>% 
  # Filter for cases where dayonset is not missing:
  filter(case == TRUE) %>% # & !is.na(dayonset)) %>% 
  # Add factor onset_datetime to ggplot aesthetic:
  ggplot(aes(x = onset_datetime)) + 
  # Add geom_bar:
  geom_bar() +
  # Adapt scale to data and adjust axis label angle:
  scale_x_datetime(
    date_breaks = "6 hours",
    labels = label_date_short()) +
  # Update x and y axis labels:
  labs(x = "Date and time of onset symptoms", 
       y = "Number of cases") +
  # Remove unnecessary grid lines:
  theme_bw()

# Print epicurve:
epicurve_datetime
```


```{r}
epicurve_strata <- linelist %>% 
  
  # Filter for cases where dayonset is not missing:
  filter(case == TRUE) %>% 
  # Add factor onset_day to ggplot aesthetic:
  ggplot(aes(x = onset_datetime, fill = group)) + 
  # Add nicer fill colours:
  scale_fill_manual(values = c("darkred", "lightblue")) +
  # Add geom_histogram:
  geom_bar() +
  # Adjust x axis scales to a suitable unit:
  scale_x_datetime(
    date_breaks = "6 hours", 
    labels = label_date_short()) +
  # Update x and y axis labels:
  labs(x = "Date and time of onset", 
       y = "Number of cases", 
       fill = "Group", 
       title = "Epicurve of the outbreak, stratified by sex",
       subtitle = str_glue("Copenhagen, November 2006, N = {sum(linelist$case)}")) +
  # Stratify by sex:
  facet_wrap(facets = "sex",
             ncol = 2) +
  # Add theme:
  theme_bw()

# Print epicurve:
epicurve_strata 
```

## 4. Person

### a) Cross-tabulation of cases with group

```{r group_tabyl}

linelist %>% 
  
  janitor::tabyl(case, group) %>% 
  
  adorn_totals() %>% 
  
  adorn_percentages() %>% 
  
  adorn_pct_formatting() 

```

### b) Cross-tabulation of cases with sex

```{r sex_tabyl}

linelist %>% 
  
  janitor::tabyl(case, sex) %>% 
  
  adorn_totals() %>% 
  
  adorn_percentages() %>% 
  
  adorn_pct_formatting() 

```

### c) Extra - Pyramid

Age-sex pyramid of cases

```{r age_sex_pyram}

linelist <- linelist %>% 
  # Create age categories:
  mutate(age_cat = epikit::age_categories(
    # Name of age column:
    x = age, 
    # Define the age categories:
    breakers = c(0, 10, 16, 18, 20, 50, 70)
    )
  )


# Check age categories:
janitor::tabyl(linelist, age_cat)

# Pipe linelist:
agesex <- linelist %>% 
  # Filter for cases only:
  filter(case == TRUE) %>% 
  # Create age sex pyramid:
  apyramid::age_pyramid(
  # Specify column containing age categories:
    age_group = "age_cat",
    # Specify column containing sex:
    split_by = "sex", 
    # Don't show midpoint on the graph:
    show_midpoint = FALSE
    )

# Print plot:
agesex
```

(Hint: change `show_midpoint = FALSE` to `TRUE` to see skewedness in the data patterns more easily).

## 5. Symptoms

a) Summary table of symptoms, stratified by case definition

```{r symptoms_tab}

# Create summary table:
tabsymptoms <- linelist %>% 
    # Select person characteristics to summarise:
  select(case, diarrhoea, bloody, vomiting,
             abdo, nausea, fever,headache, jointpain) %>% 
  # transform clinical symptoms to factors, so NA can be accounted properly in the table
  dplyr::mutate(
    across(c(diarrhoea, bloody, vomiting,
             abdo, nausea, fever,headache, jointpain), 
           ~as.factor(.))) %>%
  # Make NA a explicit level of factor variables
  dplyr::mutate(
    across(c(diarrhoea, bloody, vomiting,
           abdo, nausea, fever,headache, jointpain), 
         ~forcats::fct_na_value_to_level(.))) %>% 
    # Create the summary table:
  gtsummary::tbl_summary(
    # Stratify by case:
    by = case, 
    # Calculate row percentages:
    percent = "column",
    # Create nice labels:
    label  = list(
      diarrhoea   ~ "Diarrhoea",                           
      bloody      ~ "Dysentary",
      vomiting    ~ "Vomiting",
      abdo        ~ "Abdominal pain",
      nausea      ~ "Nausea", 
      fever       ~ "Fever", 
      headache    ~ "Headache", 
      jointpain   ~ "Joint pain")
    
  ) %>% 
  # Add totals:
  add_overall() %>% 
  # Make variable names bold and italics:
  bold_labels() %>% 
  italicize_labels() %>% 
  # Modify header:
  modify_header(
    label = "**Characteristic**",
    stat_0 = "**Overall**\n **N** = {N}",
    stat_1 = "**Non-case**\n **N** = {n}",
    stat_2 = "**Case**\n **N** = {n}", 
    ) %>% 
  # Convert to flextable for printing:
  gtsummary::as_flex_table()

# Print the table:
tabsymptoms
```

b) Bar plot of symptoms stratified by case definition

```{r symptom_barplot}

# Create list of symptom variables:
symptoms <- c("diarrhoea", 
              "bloody", 
              "vomiting", 
              "abdo", 
              "nausea", 
              "fever", 
              "headache", 
              "jointpain")

# Create nice labels for case definition:
caselabs <- ggplot2::as_labeller(c(`FALSE` = "Non-case", 
                                   `TRUE` = "Case"))
# Select variables and cases:
symptom_bar <- linelist %>% 
  # Select symptom columns:
  select(case, c(all_of(symptoms))) %>%
  # Drop NAs:
  drop_na() %>% 
  # Reshape (pivot longer):
  pivot_longer(!case, 
               names_to = "Symptoms", 
               values_drop_na = TRUE) %>% 
  # Keep only TRUE values:
  filter(value == TRUE) %>% 
  # Group by symptoms and case:
  group_by(Symptoms, case) %>% 
  # Count for each symptom by case:
  dplyr::summarise(count = n()) %>% 
  # Create plot:
  ggplot(aes(
    # Order symptom bars so most common ones are ontop:
    x = reorder(Symptoms, desc(count), decreasing = TRUE), 
    y = count)) +
  # Display bars as proportions
  geom_bar(stat = "identity") +
  # Update x axis label:
  xlab("Symptoms") +
  # Update y axis label:
  ylab("Proportion of respondents") +
  # Flip plot on its side so symptom labels are clear:
  coord_flip() +
  # Facet the plot by (labelled) case:
  facet_wrap(facets = "case",
             labeller = caselabs,
             ncol = 2)

# Print plot:
symptom_bar
```

## 6. Attack proportions

a) Overall attack proportion

```{r attack_prop_overall}

# Create table of case status:
total_ap <- tabyl(linelist, case) %>% 
 # Add row totals:
  adorn_totals(where = "row") %>% 
  # Add percentages with 1 digit after the decimal point:
  adorn_pct_formatting(digits = 1) %>% 
  # Filter to rows where case is TRUE:
  filter(case == TRUE) %>% 
  # Select the column percent:
  select(percent) %>% 
  # Extract (pull) the value from this cell:
  pull()

# Print result:
total_ap

```

b) Attack proportions for class, group and sex by case status

```{r attack_prop}

# Table to calculate attack proportions:
attack_prop <- linelist %>% 
  # Select columns:
  select (case, class, group, sex) %>% 
  # Create table:
  tbl_summary(
    # Stratified by case
    by = case, 
    # With row percentages
    percent = "row") %>%
  # Add totals:
  add_overall() %>%
 # Add p values:
  add_p() %>% 
  # Make variable names bold and italics:
  bold_labels() %>% 
  italicize_labels() %>% 
  # Modify header:
  modify_header(
    label = "**Characteristic**",
    stat_0 = "**Overall** **N** = {N}",
    stat_1 = "**Non-case** **N** = {n}",
    stat_2 = "**Case** **N** = {n}", 
    p.value = "**P value**"
  ) %>% 
  # Sort by p-value:
  sort_p() %>% 
  # Convert to flextable:
  gtsummary::as_flex_table()

# Print table:
attack_prop

```